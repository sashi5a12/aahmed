/* Generated by Together */

package com.netpace.aims.model.events;

import java.util.Enumeration;
import java.util.Iterator;
import java.util.Vector;

import com.netpace.aims.bo.events.AimsEventObject;
import com.netpace.aims.bo.events.Event;
import com.netpace.aims.bo.events.EventHandler;
import com.netpace.aims.model.BaseValueObject;
import com.netpace.aims.util.AimsNotificationConstants;

abstract public class BaseEvent extends BaseValueObject implements Event
{
    Object eventObj = null;

    public void attach(EventHandler listener)
    {
        listenersVector.addElement(listener);
    }

    public void detach(EventHandler listener)
    {
        listenersVector.removeElement(listener);
    }

    /**
     * This method calls all intrested handlers with the specified Event Object. 
     */
    public void raiseEvent(AimsEventObject eventObj)
    {
        java.util.Enumeration enumeration = listeners();
        while (enumeration.hasMoreElements())
        {
            try
            {
            ((EventHandler)enumeration.nextElement()).handleEvent(eventObj);
            }
            catch(Exception e)
            {
                e.printStackTrace();
            }
        }
    }

    Enumeration listeners()
    {
        return ((java.util.Vector) listenersVector.clone()).elements();
    }

    public AimsEventObject getNewEventObject()
    {
        AimsEventObject eventObject = new AimsEventObject(this);
        AimsPlaceHolder aimsPlaceHolder = null;

        for (Iterator iter = ((AimsEventLite)this).getEventPlaceHolders().iterator(); iter.hasNext();)
        {
            aimsPlaceHolder = (AimsPlaceHolder) iter.next();
            eventObject.setProperty(aimsPlaceHolder.getPlaceHolderDisplayName(), AimsNotificationConstants.PLACE_HOLDER_NO_VALUE);
        }

        return eventObject;
    }

    /** @associates <{EventHandler}>*/
    private Vector listenersVector = new java.util.Vector();
}

package com.ttdev.sp;

import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 2.7.8
 * 2013-12-26T09:58:13.710-08:00
 * Generated source version: 2.7.8
 * 
 */
@WebServiceClient(name = "StatProducer", 
                  wsdlLocation = "src/main/resources/StatProducer.wsdl",
                  targetNamespace = "http://ttdev.com/sp") 
public class StatProducer_Service extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://ttdev.com/sp", "StatProducer");
    public final static QName P1 = new QName("http://ttdev.com/sp", "p1");
    static {
        URL url = StatProducer_Service.class.getResource("src/main/resources/StatProducer.wsdl");
        if (url == null) {
            url = StatProducer_Service.class.getClassLoader().getResource("src/main/resources/StatProducer.wsdl");
        } 
        if (url == null) {
            java.util.logging.Logger.getLogger(StatProducer_Service.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "src/main/resources/StatProducer.wsdl");
        }       
        WSDL_LOCATION = url;
    }

    public StatProducer_Service(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public StatProducer_Service(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public StatProducer_Service() {
        super(WSDL_LOCATION, SERVICE);
    }
    

    /**
     *
     * @return
     *     returns StatProducer
     */
    @WebEndpoint(name = "p1")
    public StatProducer getP1() {
        return super.getPort(P1, StatProducer.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns StatProducer
     */
    @WebEndpoint(name = "p1")
    public StatProducer getP1(WebServiceFeature... features) {
        return super.getPort(P1, StatProducer.class, features);
    }

}

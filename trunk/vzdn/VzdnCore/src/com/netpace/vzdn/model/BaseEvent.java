/* Generated by Together */

package com.netpace.vzdn.model;

import com.netpace.vzdn.service.impl.Event;
import com.netpace.vzdn.service.impl.EventHandler;
import com.netpace.vzdn.service.impl.VzdnEventObject;
import com.netpace.vzdn.util.VzdnNotificationConstants;
import com.netpace.vzdn.webapp.actions.TestNotificationAction;

import java.util.*;

import org.apache.log4j.Logger;

abstract public class BaseEvent extends BaseValueObject implements Event
{
	
	private static Logger log = Logger.getLogger(BaseValueObject.class);
	
    Object eventObj = null;

    public void attach(EventHandler listener)
    {
        listenersVector.addElement(listener);
    }

    public void detach(EventHandler listener)
    {
        listenersVector.removeElement(listener);
    }

    /**
     * This method calls all intrested handlers with the specified Event Object. 
     */
    public void raiseEvent(VzdnEventObject eventObj)
    {
    	log.info("Entering BaseEvent.raiseEvent():");
        java.util.Enumeration enumeration = listeners();
        while (enumeration.hasMoreElements())
        {
            try
            {
            	log.info("Going to find the handler for the event and calling handleEvent method:");
            	((EventHandler)enumeration.nextElement()).handleEvent(eventObj);
            	log.info("handleEvent retruned:");
            }
            catch(Exception e)
            {
            	log.error(e.getStackTrace());
            	log.error(e.getMessage());
                e.printStackTrace();
            }
        }
    }

    Enumeration listeners()
    {
        return ((java.util.Vector) listenersVector.clone()).elements();
    }

    public VzdnEventObject getNewEventObject()
    {
        VzdnEventObject eventObject = new VzdnEventObject(this);
        VzdnPlaceHolders vzdnPlaceHolder = null;

        for (Iterator iter = ((VzdnEventLite)this).getEventPlaceHolders().iterator(); iter.hasNext();)
        {
            vzdnPlaceHolder = (VzdnPlaceHolders) iter.next();
            eventObject.setProperty(vzdnPlaceHolder.getPlaceHolderDisplayName(), VzdnNotificationConstants.PLACE_HOLDER_NO_VALUE);
        }

        return eventObject;
    }

    /** @associates <{EventHandler}>*/
    private Vector listenersVector = new java.util.Vector();
}

/* Generated by Together */

package com.netpace.vzdn.service.impl;

//import net.sf.hibernate.*;
import org.hibernate.*;
//import net.sf.hibernate.HibernateException;

import org.apache.log4j.Logger;

import java.util.*;
import com.netpace.vzdn.db.HibernateSessionFactory;
import com.netpace.vzdn.model.VzdnEventHandlers;
import com.netpace.vzdn.model.VzdnEventLite;



/**
 * This Singleton classes acts as a manager for Events.
 * 
 * On startup this singleton object is created and the loadEvents method is called to load all events from database 
 * and register all the intrested listeners. 
 */
public class EventManager
{
    /**
     * This method loads all events from the database and maintains it in a
     * hashtable with event name as the key 
     */
    private Hashtable events = null;
    private static Logger log = Logger.getLogger(EventManager.class.getName());

    public void loadEvents()
    {
    	log.info("entering loadEvents() for EventManager::");
        Session session = null;
        events = new Hashtable();
        try
        {
            //session = DBHelper.getInstance().getSession();
        	log.info("going to find all events");
            session = HibernateSessionFactory.getSession();
            Query query = session.createQuery("select event from VzdnEventLite event where event.eventId is not null");
            VzdnEventLite aimsEvent = null;
            VzdnEventHandlers aimsEventHandler = null;
            for (Iterator it = query.iterate(); it.hasNext();)
            {
                aimsEvent = (VzdnEventLite) it.next();
                try
                {
                    for (Iterator iter = aimsEvent.getEventHandlers().iterator(); iter.hasNext();)
                    {
                        aimsEventHandler = (VzdnEventHandlers) iter.next();
                        if (aimsEventHandler.getClassName() != null)
                            aimsEvent.attach((EventHandler) (Class.forName(aimsEventHandler.getClassName()).newInstance()));
                    }
                    events.put(aimsEvent.getEventId().toString(), aimsEvent);
                    log.info("added new event in events cache");
                    log.info("new event id=" + aimsEvent.getEventName());
                }
                catch(ClassNotFoundException cnfEx)
                {
                    log.debug("ClassNotFoundException");
                    System.out.println("ClassNotFoundException");
                    cnfEx.printStackTrace();
                }
                catch(java.lang.InstantiationException insEx)
                {
                    log.debug("InstantiationException");
                    System.out.println("InstantiationException");
                    insEx.printStackTrace();
                }
                catch(IllegalAccessException illEx)
                {
                    log.debug("IllegalAccessException");
                    System.out.println("IllegalAccessException");
                    illEx.printStackTrace();
                }
                catch(Exception allEx)
                {
                    log.debug("Exception while loading events");
                    System.out.println("Exception");
                    allEx.printStackTrace();
                }
            }
         }
        catch(HibernateException e)
        {
        	log.debug("Hibernate related exception found:" + e.getMessage());
            e.printStackTrace();
        }
        
        catch(Exception e)
        {
        	log.debug("Exception block :: Exception found while getting all events:" + e.getMessage());
            e.printStackTrace();
        }

        
        finally
        {
            try
            {
                session.close();
            }
            catch(Exception e)
            {
            	log.debug("Finally Block :: Exception found while getting all events:" + e.getMessage());
                e.printStackTrace();
            }
        }  
        
    }

    /**
     * Adds the given Event to the Event hashtable. 
     */
    public void addEvent(Event event)
    {
    }

    /**
     * Removes the Event from the event hashtable 
     */
    public void removeEvent(Event event) {
    }

    /**
     * Returns the event from the hashtable with the specified name. 
     */
    public VzdnEventLite getEvent(String eventId) {
    	log.info("returning event:" + events.get(eventId));
        return (VzdnEventLite) events.get(eventId);
    }

    /**
     * @link
     * @shapeType PatternLink
     * @pattern Singleton
     * @supplierRole Singleton factory
     */

    /*# private EventManagerFactory _eventManagerFactory; */

}
